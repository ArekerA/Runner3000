<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var offset_x = display_get_width()/25;
var offset_y = display_get_height()/25;
if(display_get_width() &gt; display_get_height())
{
    size = display_get_height()/6;
}
else
{
    size = display_get_width()/6;
}
display_height = display_get_height();
display_width = display_get_width();

alpha = 1;
rect_out = false;
rect_in = true;



x1 = display_get_width()/2 - 3*16/9*size/2;
x3 = display_get_width()-offset_x-size;
x4 = offset_x;
x5 = x3;

x61 = display_get_width()/2-offset_x/2-size/49/2*128-offset_x-size/49/2*128;
x62 = display_get_width()/2-offset_x/2-size/49/2*128;
x63 = display_get_width()/2+offset_x/2;
x64 = display_get_width()/2+offset_x/2+size/49/2*128+offset_x;


y1 = display_get_height()/2 - 3*size/2;
y3 = display_get_height()-offset_y-size;
y4 = display_get_height()/2-size/2;
y5 = y4;

global.VK1 = virtual_key_add(x1, y1, 3*16/9*size, 3*size, vk_down);
global.VK3 = virtual_key_add(x3, y3, size, size, vk_escape);
global.VK4 = virtual_key_add(x4, y4, size, size, vk_left);
global.VK5 = virtual_key_add(x5, y5, size, size, vk_right);
global.VKB1 = virtual_key_add(0, 0, 1, 1, vk_right);
global.VKB2 = virtual_key_add(0, 0, 1, 1, vk_right);
global.VKB3 = virtual_key_add(0, 0, 1, 1, vk_right);
global.VKB4 = virtual_key_add(0, 0, 1, 1, vk_right);
file = file_bin_open(global.save_file, 2);
file_bin_seek(file, 100);
current = file_bin_read_byte(file);
_max = 1;
_x2 = -current*display_get_width();
_x = 0;
_y = 0;
_y2 = 0;
options = false;
popup_buy = false;
popup_level_buy = false;
debug_togle = false;
needed_coins = 0;
choosen = 0;

global.choosen = 0;
file_bin_seek(file, 108);
lvl_unlock = file_bin_read_byte(file);
file_bin_seek(file, 109);
lvl1_unlock = file_bin_read_byte(file);
file_bin_seek(file, 110);
lvl2_unlock = file_bin_read_byte(file);
file_bin_close(file);
switch (os_get_language())
{
   case "pl": ini_open("pl.ini"); break;
   default: ini_open("en.ini"); break;
}
string1 = ini_read_string("game", "level1", 0);
string2 = ini_read_string("game", "level2", 0);
string_buy = ini_read_string("game", "buy", 0);
string_not = ini_read_string("game", "not_enough_c", 0);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_halign(fa_middle);
draw_set_valign(fa_top);
draw_set_font(global.font2);
draw_text(display_width/2+_x, display_height/10, string1);
draw_text(display_width/2+display_width+_x, display_height/10, string2);
draw_sprite_ext(spr_gui_level1, 0, x1+_x, y1+_y, 3*16/9*size/712, 3*size/400, 0, -1, 1);
if( (lvl_unlock &amp; 128 != 128))
{
    draw_sprite_ext(spr_gui_lock_lvl, 0, x1+_x, y1+_y, 3*16/9*size/712, 3*size/400, 0, -1, 1);
}
draw_sprite_ext(spr_gui_level2, 0, x1+display_width+_x, y1+_y, 3*16/9*size/712, 3*size/400, 0, -1, 1);
if( (lvl_unlock &amp; 64 != 64))
{
    draw_sprite_ext(spr_gui_lock_lvl, 0, x1+display_width+_x, y1+_y, 3*16/9*size/712, 3*size/400, 0, -1, 1);
}
draw_sprite_ext(spr_gui_exit, 0, x3, y3+_y, size/48, size/48, 0, -1, 1);
//======================
draw_sprite_ext(spr_fireball_energy, 0, x61+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if( (lvl1_unlock &amp; 128 != 128) &amp;&amp; (current == 0))
{
    draw_sprite_ext(spr_gui_lock, 0, x61+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_fireball_fire, 0, x62+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl1_unlock &amp; 64 != 64) &amp;&amp; (current == 0))
{
    draw_sprite_ext(spr_gui_lock, 0, x62+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_fireball_acid, 0, x63+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl1_unlock &amp; 32 != 32) &amp;&amp; (current == 0))
{
    draw_sprite_ext(spr_gui_lock, 0, x63+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_fireball_ice, 0, x64+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl1_unlock &amp; 16 != 16) &amp;&amp; (current == 0))
{
    draw_sprite_ext(spr_gui_lock, 0, x64+_x, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_bolt_cold, 0, x61+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl2_unlock &amp; 128 != 128) &amp;&amp; (current == 1))
{
    draw_sprite_ext(spr_gui_lock, 0, x61+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_bolt_fire, 0, x62+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl2_unlock &amp; 64 != 64) &amp;&amp; (current == 1))
{
    draw_sprite_ext(spr_gui_lock, 0, x62+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_bolt_acid, 0, x63+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl2_unlock &amp; 32 != 32) &amp;&amp; (current == 1))
{
    draw_sprite_ext(spr_gui_lock, 0, x63+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
draw_sprite_ext(spr_bolt_dark, 0, x64+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
if((lvl2_unlock &amp; 16 != 16) &amp;&amp; (current == 1))
{
    draw_sprite_ext(spr_gui_lock, 0, x64+_x+display_width, y4+_y+display_height, size/49/2, size/49/2, 0, -1, 1);
}
//============================
draw_sprite_ext(spr_gui_up, 0, x4, y3+_y+display_height, size/48, size/48, 0, -1, 1);
draw_sprite_ext(spr_gui_start, 0, x3, y3+_y+display_height, size/48, size/48, 0, -1, 1);

switch(global.choosen)
{
    case 1: 
        if(current == 0)
        {
            draw_rectangle_colour(x61+_x, y4+_y+display_height, x61+_x+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        if(current == 1)
        {
            draw_rectangle_colour(x61+_x+display_width, y4+_y+display_height, x61+_x+display_width+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        break;
    case 2: 
        if(current == 0)
        {
            draw_rectangle_colour(x62+_x, y4+_y+display_height, x62+_x+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        if(current == 1)
        {
            draw_rectangle_colour(x62+_x+display_width, y4+_y+display_height, x62+_x+display_width+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        break;
    case 3: 
        if(current == 0)
        {
            draw_rectangle_colour(x63+_x, y4+_y+display_height, x63+_x+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        if(current == 1)
        {
            draw_rectangle_colour(x63+_x+display_width, y4+_y+display_height, x63+_x+display_width+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        break;
    case 4: 
        if(current == 0)
        {
            draw_rectangle_colour(x64+_x, y4+_y+display_height, x64+_x+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        if(current == 1)
        {
            draw_rectangle_colour(x64+_x+display_width, y4+_y+display_height, x64+_x+display_width+size*1.305, y4+_y+display_height+size/2, c_black, c_white, c_black, c_white, true);
        }
        break;
    }
if(current != 0)
{
    draw_sprite_ext(spr_gui_left, 0, x4, y4+_y, size/48, size/48, 0, -1, 1);
}
else
{
    draw_sprite_ext(spr_gui_left2, 0, x4, y4+_y, size/48, size/48, 0, -1, 1);
}
if(current != _max)
{
    draw_sprite_ext(spr_gui_right, 0, x5, y5+_y, size/48, size/48, 0, -1, 1);
}
else
{
    draw_sprite_ext(spr_gui_right2, 0, x5, y5+_y, size/48, size/48, 0, -1, 1);
}
if(keyboard_check_pressed(vk_space))
{
    rect_out = true;
    switch (current)
    {
       case 0: r=r_cyber_city; break;
       default: r=r_mars; break;
    }
    file = file_bin_open(global.save_file, 2);
    file_bin_seek(file, 100);
    file_bin_write_byte(file, current);
    file_bin_close(file);
}
if(keyboard_check_released(vk_escape))
{
    rect_out = true;
    r = r_menu;
}
if(rect_out)
{
    alpha += 0.1
    draw_set_alpha(alpha);
    draw_set_color(c_black);
    draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
    if(alpha &gt; 1)
    {
        room_goto(r);
    }
}
if(rect_in)
{
    alpha -= 0.1
    draw_set_alpha(alpha);
    draw_set_color(c_black);
    draw_rectangle(0, 0, view_wport[0], view_hport[0], false);
    if(alpha &lt; 0)
    {
        rect_in = false;
    }
}

if(keyboard_check_released(vk_left))
{
    if(current != 0)
    {
        _x2 += display_width;
        current--;
    }
}
if(keyboard_check_released(vk_right))
{
    if(current != _max)
    {
        _x2 -= display_width;
        current++;
    }
}
if(keyboard_check_released(vk_up))
{
    if(options)
    {
        _y2 += display_height;
        options = false;
        virtual_key_delete(global.VK3);
        virtual_key_delete(global.VK4);
        virtual_key_delete(global.VKB1);
        virtual_key_delete(global.VKB2);
        virtual_key_delete(global.VKB3);
        virtual_key_delete(global.VKB4);
        global.VK1 = virtual_key_add(x1, y1, 3*16/9*size, 3*size, vk_down);
        global.VK3 = virtual_key_add(x3, y3, size, size, vk_escape);
        global.VK4 = virtual_key_add(x4, y4, size, size, vk_left);
        global.VK5 = virtual_key_add(x5, y5, size, size, vk_right);
    }
}
if(keyboard_check_released(vk_down))
{
    if(!options)
    {
        if(current == 0 &amp;&amp; lvl_unlock &amp; 128 != 128)
        {
            popup_level_buy = true;
            needed_coins = 0;
            global.VKP1 = virtual_key_add((display_width-size*4)/2+5, (display_height-size*2)/2+5, size/2, size/2, vk_delete);
            global.VKP2 = virtual_key_add((display_width-size*3)/2, (display_height+size*2-size/2)/2-50, size*3, size/2, vk_f2);
            virtual_key_delete(global.VK3);
            virtual_key_delete(global.VK4);
            virtual_key_delete(global.VK1);
            virtual_key_delete(global.VK5);
        }
        else if(current == 1 &amp;&amp; lvl_unlock &amp; 64 != 64)
        {
            popup_level_buy = true;
            needed_coins = 10000;
            global.VKP1 = virtual_key_add((display_width-size*4)/2+5, (display_height-size*2)/2+5, size/2, size/2, vk_delete);
            global.VKP2 = virtual_key_add((display_width-size*3)/2, (display_height+size*2-size/2)/2-50, size*3, size/2, vk_f2);
            virtual_key_delete(global.VK3);
            virtual_key_delete(global.VK4);
            virtual_key_delete(global.VK1);
            virtual_key_delete(global.VK5);
        }
        else
        {
            _y2 -= display_height;
            options = true;
            virtual_key_delete(global.VK3);
            virtual_key_delete(global.VK4);
            virtual_key_delete(global.VK1);
            virtual_key_delete(global.VK5);
            global.VK3 = virtual_key_add(x3, y3, size, size, vk_space);
            global.VK4 = virtual_key_add(x4, y3, size, size, vk_up);
            global.VKB1 = virtual_key_add(x61, y4, size*1.305, size/2, vk_numpad0);
            global.VKB2 = virtual_key_add(x62, y4, size*1.305, size/2, vk_numpad1);
            global.VKB3 = virtual_key_add(x63, y4, size*1.305, size/2, vk_numpad2);
            global.VKB4 = virtual_key_add(x64, y4, size*1.305, size/2, vk_numpad3);
        }
    }

}
if(keyboard_check_released(vk_numpad0))
{
    file = file_bin_open(global.save_file, 2);
    global.choosen = 1;
    if(current == 0)
    {
        file_bin_seek(file, 101);
    }
    else if(current == 1)
    {
        file_bin_seek(file, 102);
    }
    file_bin_write_byte(file, global.choosen);
    file_bin_close(file);
}
if(keyboard_check_released(vk_numpad1))
{
    file = file_bin_open(global.save_file, 2);
    if( ((lvl1_unlock &amp; 64 == 64) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 64 == 64) &amp;&amp; (current == 1)))
    {
        global.choosen = 2;
    }
    if( ((lvl1_unlock &amp; 64 != 64) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 64 != 64) &amp;&amp; (current == 1)))
    {
        choosen = 2;
        if(current == 0)
        {
            needed_coins = 50;
        }
        else if(current == 1)
        {
            needed_coins = 3000;
        }
        popup_buy = true;
        virtual_key_delete(global.VKB1);
        virtual_key_delete(global.VKB2);
        virtual_key_delete(global.VKB3);
        virtual_key_delete(global.VKB4);
        virtual_key_delete(global.VK3);
        virtual_key_delete(global.VK4);
        global.VKP1 = virtual_key_add((display_width-size*4)/2+5, (display_height-size*2)/2+5, size/2, size/2, vk_backspace);
        global.VKP2 = virtual_key_add((display_width-size*3)/2, (display_height+size*2-size/2)/2-50, size*3, size/2, vk_f1);
    }
    if(current == 0)
    {
        file_bin_seek(file, 101);
    }
    else if(current == 1)
    {
        file_bin_seek(file, 102);
    }
    file_bin_write_byte(file, global.choosen);
    file_bin_close(file);
}
if(keyboard_check_released(vk_numpad2))
{
    file = file_bin_open(global.save_file, 2);
    if(((lvl1_unlock &amp; 32 == 32) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 32 == 32) &amp;&amp; (current == 1)))
    {
        global.choosen = 3;
    }
    if( ((lvl1_unlock &amp; 32 != 32) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 32 != 32) &amp;&amp; (current == 1)))
    {
        choosen = 3;
        if(current == 0)
        {
            needed_coins = 2000;
        }
        else if(current == 1)
        {
            needed_coins = 5000;
        }
        popup_buy = true;
        virtual_key_delete(global.VKB1);
        virtual_key_delete(global.VKB2);
        virtual_key_delete(global.VKB3);
        virtual_key_delete(global.VKB4);
        virtual_key_delete(global.VK3);
        virtual_key_delete(global.VK4);
        global.VKP1 = virtual_key_add((display_width-size*4)/2+5, (display_height-size*2)/2+5, size/2, size/2, vk_backspace);
        global.VKP2 = virtual_key_add((display_width-size*3)/2, (display_height+size*2-size/2)/2-50, size*3, size/2, vk_f1);
    }
    if(current == 0)
    {
        file_bin_seek(file, 101);
    }
    else if(current == 1)
    {
        file_bin_seek(file, 102);
    }
    file_bin_write_byte(file, global.choosen);
    file_bin_close(file);
}
if(keyboard_check_released(vk_numpad3))
{
    file = file_bin_open(global.save_file, 2);
    if (((lvl1_unlock &amp; 16 == 16) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 16 == 16) &amp;&amp; (current == 1)))
    {
        global.choosen = 4;
    }
    if( ((lvl1_unlock &amp; 16 != 16) &amp;&amp; (current == 0)) || ((lvl2_unlock &amp; 16 != 16) &amp;&amp; (current == 1)))
    {
        choosen = 4;
        if(current == 0)
        {
            needed_coins = 3000;
        }
        else if(current == 1)
        {
            needed_coins = 8000;
        }
        popup_buy = true;
        virtual_key_delete(global.VKB1);
        virtual_key_delete(global.VKB2);
        virtual_key_delete(global.VKB3);
        virtual_key_delete(global.VKB4);
        virtual_key_delete(global.VK3);
        virtual_key_delete(global.VK4);
        global.VKP1 = virtual_key_add((display_width-size*4)/2+5, (display_height-size*2)/2+5, size/2, size/2, vk_backspace);
        global.VKP2 = virtual_key_add((display_width-size*3)/2, (display_height+size*2-size/2)/2-50, size*3, size/2, vk_f1);
    }
    if(current == 0)
    {
        file_bin_seek(file, 101);
    }
    else if(current == 1)
    {
        file_bin_seek(file, 102);
    }
    file_bin_write_byte(file, global.choosen);
    file_bin_close(file);
}
if(keyboard_check_released(vk_backspace))
{
    popup_buy = false;
    global.VKB1 = virtual_key_add(x61, y4, size*1.305, size/2, vk_numpad0);
    global.VKB2 = virtual_key_add(x62, y4, size*1.305, size/2, vk_numpad1);
    global.VKB3 = virtual_key_add(x63, y4, size*1.305, size/2, vk_numpad2);
    global.VKB4 = virtual_key_add(x64, y4, size*1.305, size/2, vk_numpad3);
    global.VK3 = virtual_key_add(x3, y3, size, size, vk_space);
    global.VK4 = virtual_key_add(x4, y3, size, size, vk_up);
    virtual_key_delete(global.VKP1);
    virtual_key_delete(global.VKP2);
}
if(keyboard_check_released(vk_delete))
{
    popup_level_buy = false;
    global.VK1 = virtual_key_add(x1, y1, 3*16/9*size, 3*size, vk_down);
    global.VK3 = virtual_key_add(x3, y3, size, size, vk_escape);
    global.VK4 = virtual_key_add(x4, y4, size, size, vk_left);
    global.VK5 = virtual_key_add(x5, y5, size, size, vk_right);
    virtual_key_delete(global.VKP1);
    virtual_key_delete(global.VKP2);
}
if(keyboard_check_released(vk_f12))
{
    debug_togle = !debug_togle;
    if(debug_togle)
    {
        virtual_key_show(global.VKP1);
        virtual_key_show(global.VKP2);
    }
    else
    {
        virtual_key_hide(global.VKP1);
        virtual_key_hide(global.VKP2);
    }
}
if(keyboard_check_released(vk_f1))
{
    file = file_bin_open(global.save_file, 2);
    if(global.global_coins &gt; needed_coins)
    {
        global.global_coins -= needed_coins;
        var coins = global.global_coins;
        file = file_bin_open(global.save_file, 2);
        if(coins &gt;= 4294967296)
        {
            file_bin_seek(file, 0);
            file_bin_write_byte(file, floor(coins/4294967296));
            coins -= floor(coins/4294967296)*4294967296
        }
        if(coins &gt;= 16777216)
        {
            file_bin_seek(file, 1);
            file_bin_write_byte(file, floor(coins/16777216));
            coins -= floor(coins/16777216)*16777216
        }
        if(coins &gt;= 65536)
        {
            file_bin_seek(file, 2);
            file_bin_write_byte(file, floor(coins/65536));
            coins -= floor(coins/65536)*65536
        }
        if(coins &gt;= 256)
        {
            file_bin_seek(file, 3);
            file_bin_write_byte(file, floor(coins/256));
            coins -= floor(coins/256)*256
        }
        file_bin_seek(file, 4);
        file_bin_write_byte(file, coins);
        if(current == 0)
        {
            if(choosen == 2)
            {
                lvl1_unlock = lvl1_unlock | 64;
            }
            if(choosen == 3)
            {
                lvl1_unlock = lvl1_unlock | 32;
            }
            if(choosen == 4)
            {
                lvl1_unlock = lvl1_unlock | 16;
            }
            file_bin_seek(file, 109);
            file_bin_write_byte(file, lvl1_unlock);
        }
        else if(current == 1)
        {
            if(choosen == 2)
            {
                lvl2_unlock = lvl2_unlock | 64;
            }
            if(choosen == 3)
            {
                lvl2_unlock = lvl2_unlock | 32;
            }
            if(choosen == 4)
            {
                lvl2_unlock = lvl2_unlock | 16;
            }
            file_bin_seek(file, 110);
            file_bin_write_byte(file, lvl2_unlock);
        }
        popup_buy = false;
        global.VKB1 = virtual_key_add(x61, y4, size*1.305, size/2, vk_numpad0);
        global.VKB2 = virtual_key_add(x62, y4, size*1.305, size/2, vk_numpad1);
        global.VKB3 = virtual_key_add(x63, y4, size*1.305, size/2, vk_numpad2);
        global.VKB4 = virtual_key_add(x64, y4, size*1.305, size/2, vk_numpad3);
        global.VK3 = virtual_key_add(x3, y3, size, size, vk_space);
        global.VK4 = virtual_key_add(x4, y3, size, size, vk_up);
        virtual_key_delete(global.VKP1);
        virtual_key_delete(global.VKP2);
    }
    file_bin_close(file);
}
if(keyboard_check_released(vk_f2))
{
    file = file_bin_open(global.save_file, 2);
    if(global.global_coins &gt; needed_coins)
    {
        global.global_coins -= needed_coins;
        var coins = global.global_coins;
        file = file_bin_open(global.save_file, 2);
        if(coins &gt;= 4294967296)
        {
            file_bin_seek(file, 0);
            file_bin_write_byte(file, floor(coins/4294967296));
            coins -= floor(coins/4294967296)*4294967296
        }
        if(coins &gt;= 16777216)
        {
            file_bin_seek(file, 1);
            file_bin_write_byte(file, floor(coins/16777216));
            coins -= floor(coins/16777216)*16777216
        }
        if(coins &gt;= 65536)
        {
            file_bin_seek(file, 2);
            file_bin_write_byte(file, floor(coins/65536));
            coins -= floor(coins/65536)*65536
        }
        if(coins &gt;= 256)
        {
            file_bin_seek(file, 3);
            file_bin_write_byte(file, floor(coins/256));
            coins -= floor(coins/256)*256
        }
        file_bin_seek(file, 4);
        file_bin_write_byte(file, coins);
        if(current == 0)
        {
            lvl_unlock = lvl_unlock | 128;
            file_bin_seek(file, 108);
            file_bin_write_byte(file, lvl_unlock);
        }
        else if(current == 1)
        {
            lvl_unlock = lvl_unlock | 64;
            file_bin_seek(file, 108);
            file_bin_write_byte(file, lvl_unlock);
        }
        popup_level_buy = false;
        global.VK1 = virtual_key_add(x1, y1, 3*16/9*size, 3*size, vk_down);
        global.VK3 = virtual_key_add(x3, y3, size, size, vk_escape);
        global.VK4 = virtual_key_add(x4, y4, size, size, vk_left);
        global.VK5 = virtual_key_add(x5, y5, size, size, vk_right);
        virtual_key_delete(global.VKP1);
        virtual_key_delete(global.VKP2);
    }
    file_bin_close(file);
}

if(_x &lt; _x2)
{
    _x += display_width/10;
}
else if(_x &gt; _x2)
{
    _x -= display_width/10;
}
if(_y &lt; _y2)
{
    _y += display_height/10;
}
else if(_y &gt; _y2)
{
    _y -= display_height/10;
}
if(popup_buy)
{
    draw_rectangle_colour((display_width-size*4)/2, (display_height-size*2)/2, (display_width+size*4)/2, (display_height+size*2)/2, c_black, c_black, c_black, c_black, false);
    draw_sprite_ext(spr_gui_exit, 0, (display_width-size*4)/2+5, (display_height-size*2)/2+5, size/96, size/96, 0, -1, 1);
    draw_text(display_width/2, (display_height-size)/2, string(needed_coins)+"c");
    draw_set_valign(fa_bottom);
    if(global.global_coins &gt; needed_coins)
    {
        draw_text(display_width/2, (display_height+size*2)/2-5, string_buy);
    }
    else
    {
        draw_text(display_width/2, (display_height+size*2)/2-5, string_not);
    }
}
if(popup_level_buy)
{
    draw_rectangle_colour((display_width-size*4)/2, (display_height-size*2)/2, (display_width+size*4)/2, (display_height+size*2)/2, c_black, c_black, c_black, c_black, false);
    draw_sprite_ext(spr_gui_exit, 0, (display_width-size*4)/2+5, (display_height-size*2)/2+5, size/96, size/96, 0, -1, 1);
    draw_text(display_width/2, (display_height-size)/2, string(needed_coins)+"c");
    draw_set_valign(fa_bottom);
    if(global.global_coins &gt; needed_coins)
    {
        draw_text(display_width/2, (display_height+size*2)/2-5, string_buy);
    }
    else
    {
        draw_text(display_width/2, (display_height+size*2)/2-5, string_not);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
